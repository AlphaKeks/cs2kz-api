{
  "openapi": "3.0.3",
  "info": {
    "title": "CS2KZ API",
    "description": "The backend API for CS2KZ",
    "contact": {
      "name": "AlphaKeks",
      "email": "alphakeks@dawn.sh"
    },
    "license": {
      "name": "GPL-3.0",
      "url": "https://www.gnu.org/licenses/gpl-3.0"
    },
    "version": "0.0.0"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "The API is up and running!",
        "description": "The API is up and running!",
        "operationId": "status",
        "responses": {
          "200": {
            "description": "(͡ ͡° ͜ つ ͡͡°)"
          }
        }
      }
    },
    "/maps": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Fetch globally approved maps.",
        "description": "Fetch globally approved maps.",
        "operationId": "get_many",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "mapper",
            "in": "query",
            "description": "Filter by mapper.\n\nThis can be either a SteamID or name.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "global_status",
            "in": "query",
            "description": "Filter by global status.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GlobalStatus"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum amount of results.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset used for pagination.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A KZ map.",
                  "required": [
                    "id",
                    "workshop_id",
                    "name",
                    "mappers",
                    "courses",
                    "global_status",
                    "checksum",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The map's ID.",
                      "minimum": 0
                    },
                    "workshop_id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The map's Steam Workshop ID.",
                      "minimum": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "The map's name."
                    },
                    "mappers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Player"
                      },
                      "description": "List of players who have contributed to creating this map."
                    },
                    "courses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Course"
                      },
                      "description": "List of courses which are part of this map."
                    },
                    "global_status": {
                      "$ref": "#/components/schemas/GlobalStatus"
                    },
                    "description": {
                      "type": "string",
                      "description": "The map's description.",
                      "nullable": true
                    },
                    "checksum": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The map's unique checksum.\n\nThis is calculated by running the map's `.vpk` file through [crc32].\n\n[crc32]: https://en.wikipedia.org/wiki/Cyclic_redundancy_check",
                      "minimum": 0
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this map was approved for globalling."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      },
      "put": {
        "tags": [
          "Maps"
        ],
        "summary": "Create or update a map.",
        "description": "Create or update a map.\n\nUpdates via this endpoint are considered to be breaking changes and will invalidate older\nversions of the supplied map (if any).\n\nDifferent versions of \"the same\" map are determined by their name. If you want to update\njust the metadata of a map, use `PATCH /maps/{map_id}` instead.",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewMap"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "HACK: if we derived `IntoResponses` on `Created` directly, we would have to put\na `ToSchema` bound on `T` (on the struct itself), which we do not want.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response body for newly created maps.\n\nSee [`NewMap`].",
                  "required": [
                    "map_id"
                  ],
                  "properties": {
                    "map_id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The map's ID.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          },
          "502": {
            "description": "Communication with an external service failed (e.g. Steam)."
          }
        },
        "security": [
          {
            "Steam Session": [
              "maps"
            ]
          }
        ]
      }
    },
    "/maps/{map}": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Fetch a single map.",
        "description": "Fetch a single map.",
        "operationId": "get_single",
        "parameters": [
          {
            "name": "map",
            "in": "path",
            "description": "A map's ID or Name",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          {
            "name": "global_status",
            "in": "query",
            "description": "Filter by global status.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/GlobalStatus"
                }
              ],
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A KZ map.",
                  "required": [
                    "id",
                    "workshop_id",
                    "name",
                    "mappers",
                    "courses",
                    "global_status",
                    "checksum",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The map's ID.",
                      "minimum": 0
                    },
                    "workshop_id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The map's Steam Workshop ID.",
                      "minimum": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "The map's name."
                    },
                    "mappers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Player"
                      },
                      "description": "List of players who have contributed to creating this map."
                    },
                    "courses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Course"
                      },
                      "description": "List of courses which are part of this map."
                    },
                    "global_status": {
                      "$ref": "#/components/schemas/GlobalStatus"
                    },
                    "description": {
                      "type": "string",
                      "description": "The map's description.",
                      "nullable": true
                    },
                    "checksum": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The map's unique checksum.\n\nThis is calculated by running the map's `.vpk` file through [crc32].\n\n[crc32]: https://en.wikipedia.org/wiki/Cyclic_redundancy_check",
                      "minimum": 0
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this map was approved for globalling."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      }
    },
    "/maps/{map_id}": {
      "patch": {
        "tags": [
          "Maps"
        ],
        "summary": "Update metadata for a map.",
        "description": "Update metadata for a map.",
        "operationId": "update",
        "parameters": [
          {
            "name": "map_id",
            "in": "path",
            "description": "The map's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          },
          "502": {
            "description": "Communication with an external service failed (e.g. Steam)."
          }
        },
        "security": [
          {
            "Steam Session": [
              "maps"
            ]
          }
        ]
      }
    },
    "/servers": {
      "get": {
        "tags": [
          "Servers"
        ],
        "summary": "Fetch registered CS2 servers.",
        "description": "Fetch registered CS2 servers.",
        "operationId": "get_many",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "owner",
            "in": "query",
            "description": "Filter by server owner.\n\nThis can be either a SteamID or name.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum amount of results.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset used for pagination.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response body for fetching KZ servers.",
                  "required": [
                    "id",
                    "name",
                    "ip_address",
                    "owned_by",
                    "approved_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The server's ID.",
                      "minimum": 0
                    },
                    "name": {
                      "type": "string",
                      "description": "The server's name."
                    },
                    "ip_address": {
                      "type": "string",
                      "description": "The server's IP address."
                    },
                    "owned_by": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "approved_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this server was approved."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      },
      "post": {
        "tags": [
          "Servers"
        ],
        "summary": "Register a new CS2 server.",
        "description": "Register a new CS2 server.",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewServer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "HACK: if we derived `IntoResponses` on `Created` directly, we would have to put\na `ToSchema` bound on `T` (on the struct itself), which we do not want.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly approved KZ server.\n\nSee [`NewServer`].",
                  "required": [
                    "server_id",
                    "api_key"
                  ],
                  "properties": {
                    "server_id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The server's ID.",
                      "minimum": 0
                    },
                    "api_key": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The server's semi-permanent API Key.",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "servers"
            ]
          }
        ]
      }
    },
    "/servers/{server}": {
      "get": {
        "tags": [
          "Servers"
        ],
        "summary": "Fetch a single registered CS2 server.",
        "description": "Fetch a single registered CS2 server.",
        "operationId": "get_single",
        "parameters": [
          {
            "name": "server",
            "in": "path",
            "description": "A server's ID or Name",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response body for fetching KZ servers.",
                  "required": [
                    "id",
                    "name",
                    "ip_address",
                    "owned_by",
                    "approved_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The server's ID.",
                      "minimum": 0
                    },
                    "name": {
                      "type": "string",
                      "description": "The server's name."
                    },
                    "ip_address": {
                      "type": "string",
                      "description": "The server's IP address."
                    },
                    "owned_by": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "approved_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this server was approved."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      }
    },
    "/servers/{server_id}": {
      "patch": {
        "tags": [
          "Servers"
        ],
        "summary": "Update a registered CS2 server.",
        "description": "Update a registered CS2 server.",
        "operationId": "update",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "description": "The server's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServerUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "servers"
            ]
          }
        ]
      }
    },
    "/servers/{server_id}/key": {
      "put": {
        "tags": [
          "Servers"
        ],
        "summary": "Generate a new API key for a registered CS2 server.",
        "description": "Generate a new API key for a registered CS2 server.",
        "operationId": "replace_key",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "description": "The server's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "201": {
            "description": "HACK: if we derived `IntoResponses` on `Created` directly, we would have to put\na `ToSchema` bound on `T` (on the struct itself), which we do not want.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly approved KZ server.\n\nSee [`NewServer`].",
                  "required": [
                    "server_id",
                    "api_key"
                  ],
                  "properties": {
                    "server_id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The server's ID.",
                      "minimum": 0
                    },
                    "api_key": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The server's semi-permanent API Key.",
                      "minimum": 1
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "servers"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Servers"
        ],
        "summary": "Delete a CS2 server's API key.",
        "description": "Delete a CS2 server's API key.\n\nThe server owner cannot generate a new one, so this effectively disables their server until an\nadmin generates a new key.",
        "operationId": "delete_key",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "description": "The server's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "servers"
            ]
          }
        ]
      }
    },
    "/players": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Fetch players who have joined a KZ server before.",
        "description": "Fetch players who have joined a KZ server before.",
        "operationId": "get_many",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum amount of results.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "nullable": true,
              "maximum": 1000,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset used for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Basic information about a KZ player.\n\nThis is included as a field inside many other types.",
                  "required": [
                    "steam_id",
                    "name"
                  ],
                  "properties": {
                    "steam_id": {
                      "$ref": "#/components/schemas/SteamID"
                    },
                    "name": {
                      "type": "string",
                      "description": "The player's latest known name."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      },
      "post": {
        "tags": [
          "Players"
        ],
        "summary": "Register a new player.",
        "description": "Register a new player.\n\nIt is only usable by CS2 servers and will return an error for existing players.",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlayer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "HACK: if we derived `IntoResponses` on `Created` directly, we would have to put\na `ToSchema` bound on `T` (on the struct itself), which we do not want.",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "409": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "CS2 Server JWT": []
          }
        ]
      }
    },
    "/players/{player}": {
      "get": {
        "tags": [
          "Players"
        ],
        "summary": "Fetch a specific player.",
        "description": "Fetch a specific player.",
        "operationId": "get_single",
        "parameters": [
          {
            "name": "player",
            "in": "path",
            "description": "A player's SteamID or Name",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SteamID"
                },
                {
                  "type": "string"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Basic information about a KZ player.\n\nThis is included as a field inside many other types.",
                  "required": [
                    "steam_id",
                    "name"
                  ],
                  "properties": {
                    "steam_id": {
                      "$ref": "#/components/schemas/SteamID"
                    },
                    "name": {
                      "type": "string",
                      "description": "The player's latest known name."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      }
    },
    "/bans": {
      "get": {
        "tags": [
          "Bans"
        ],
        "summary": "Fetch bans.",
        "description": "Fetch bans.",
        "operationId": "get_many",
        "parameters": [
          {
            "name": "player",
            "in": "query",
            "description": "Filter by player.\n\nThis can be either a SteamID or name.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "Filter by ban reason.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BanReason"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "Filter by server.\n\nThis can either be an ID or name.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "banned_by",
            "in": "query",
            "description": "Filter by admin.\n\nThis can be either a SteamID or name.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "has_expired",
            "in": "query",
            "description": "Filter by bans which have (not) expired yet.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum amount of results.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset used for pagination.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A player ban.",
                  "required": [
                    "id",
                    "player",
                    "reason",
                    "plugin_version",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The ban's ID.",
                      "minimum": 0
                    },
                    "player": {
                      "$ref": "#/components/schemas/BannedPlayer"
                    },
                    "reason": {
                      "$ref": "#/components/schemas/BanReason"
                    },
                    "server": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Server"
                        }
                      ],
                      "nullable": true
                    },
                    "plugin_version": {
                      "type": "string",
                      "description": "The cs2kz plugin version at the time of the ban.\n\nThis is either the version the [`server`] was currently running on, or the latest\ncurrent version, if they player got banned by an admin directly.\n\n[`server`]: Ban::server"
                    },
                    "banned_by": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Player"
                        }
                      ],
                      "nullable": true
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban was issued."
                    },
                    "expires_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban will expire.",
                      "nullable": true
                    },
                    "unban": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Unban"
                        }
                      ],
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      },
      "post": {
        "tags": [
          "Bans"
        ],
        "summary": "Ban a player.",
        "description": "Ban a player.\n\nRequests with a SteamID of a player who is already banned will fail. Use `PATCH /bans/{ban_id}`\nto update existing bans.",
        "operationId": "create",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBan"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "HACK: if we derived `IntoResponses` on `Created` directly, we would have to put\na `ToSchema` bound on `T` (on the struct itself), which we do not want.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response body for a newly created player ban.\n\nSee [`NewBan`].",
                  "required": [
                    "ban_id",
                    "expires_on"
                  ],
                  "properties": {
                    "ban_id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The ban's ID.",
                      "minimum": 0
                    },
                    "expires_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban will expire."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "409": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "bans"
            ]
          },
          {
            "CS2 Server JWT": []
          }
        ]
      }
    },
    "/bans/{ban_id}": {
      "get": {
        "tags": [
          "Bans"
        ],
        "summary": "Fetch a specific ban.",
        "description": "Fetch a specific ban.",
        "operationId": "get_single",
        "parameters": [
          {
            "name": "ban_id",
            "in": "path",
            "description": "The ban's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A player ban.",
                  "required": [
                    "id",
                    "player",
                    "reason",
                    "plugin_version",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The ban's ID.",
                      "minimum": 0
                    },
                    "player": {
                      "$ref": "#/components/schemas/BannedPlayer"
                    },
                    "reason": {
                      "$ref": "#/components/schemas/BanReason"
                    },
                    "server": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Server"
                        }
                      ],
                      "nullable": true
                    },
                    "plugin_version": {
                      "type": "string",
                      "description": "The cs2kz plugin version at the time of the ban.\n\nThis is either the version the [`server`] was currently running on, or the latest\ncurrent version, if they player got banned by an admin directly.\n\n[`server`]: Ban::server"
                    },
                    "banned_by": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Player"
                        }
                      ],
                      "nullable": true
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban was issued."
                    },
                    "expires_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban will expire.",
                      "nullable": true
                    },
                    "unban": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Unban"
                        }
                      ],
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      },
      "patch": {
        "tags": [
          "Bans"
        ],
        "summary": "Update a ban.",
        "description": "Update a ban.",
        "operationId": "update",
        "parameters": [
          {
            "name": "ban_id",
            "in": "path",
            "description": "The ban's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BanUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "bans"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Bans"
        ],
        "summary": "Revert a ban.",
        "description": "Revert a ban.",
        "operationId": "unban",
        "parameters": [
          {
            "name": "ban_id",
            "in": "path",
            "description": "The ban's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUnban"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "HACK: if we derived `IntoResponses` on `Created` directly, we would have to put\na `ToSchema` bound on `T` (on the struct itself), which we do not want.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response body for a reverted ban.",
                  "required": [
                    "ban_id",
                    "unban_id"
                  ],
                  "properties": {
                    "ban_id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The ban that was reverted by this unban.",
                      "minimum": 0
                    },
                    "unban_id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The unban's ID.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "bans"
            ]
          }
        ]
      }
    },
    "/admins": {
      "get": {
        "tags": [
          "Admins"
        ],
        "summary": "Fetch users with elevated permissions.",
        "description": "Fetch users with elevated permissions.",
        "operationId": "get_many",
        "parameters": [
          {
            "name": "roles",
            "in": "query",
            "description": "Only include admins with these roles.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum amount of results.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "nullable": true,
              "maximum": 1000,
              "minimum": 0
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset used for pagination.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response body for `/admins` endpoints.",
                  "required": [
                    "name",
                    "steam_id",
                    "roles"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The admin's latest known name."
                    },
                    "steam_id": {
                      "$ref": "#/components/schemas/SteamID"
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      },
                      "description": "The admin's roles."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      }
    },
    "/admins/{steam_id}": {
      "get": {
        "tags": [
          "Admins"
        ],
        "summary": "Fetch a specific user with elevated permissions.",
        "description": "Fetch a specific user with elevated permissions.",
        "operationId": "get_single",
        "parameters": [
          {
            "name": "steam_id",
            "in": "path",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response body for `/admins` endpoints.",
                  "required": [
                    "name",
                    "steam_id",
                    "roles"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The admin's latest known name."
                    },
                    "steam_id": {
                      "$ref": "#/components/schemas/SteamID"
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      },
                      "description": "The admin's roles."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      },
      "put": {
        "tags": [
          "Admins"
        ],
        "summary": "Create or update admins.",
        "description": "Create or update admins.\n\nUpdates are idempotent, so the user's roles will be replaced completely by the roles supplied\nin the request body.",
        "operationId": "update",
        "parameters": [
          {
            "name": "steam_id",
            "in": "path",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        },
        "security": [
          {
            "Steam Session": [
              "admin"
            ]
          }
        ]
      }
    },
    "/auth/login": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Login with Steam.",
        "description": "Login with Steam.",
        "operationId": "login",
        "parameters": [
          {
            "name": "return_to",
            "in": "query",
            "description": "The URL to return to after logging in.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri"
            }
          }
        ],
        "responses": {
          "303": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Log out.",
        "description": "Log out.\n\n**This will only invalidate your current session.**\nIf you wish to invalidate **all** previous sessions, set `all=true`.",
        "operationId": "logout",
        "parameters": [
          {
            "name": "return_to",
            "in": "query",
            "description": "URL to redirect back to.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uri",
              "nullable": true
            }
          },
          {
            "name": "all",
            "in": "query",
            "description": "Invalidate *all* old sessions.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      }
    },
    "/auth/steam/callback": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "This endpoint will be used by Steam during the login process (see `GET /auth/login`).",
        "description": "This endpoint will be used by Steam during the login process (see `GET /auth/login`).",
        "operationId": "callback",
        "parameters": [
          {
            "name": "openid.return_to",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "openid.mode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.ns",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.op_endpoint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.claimed_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "openid.identity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "openid.response_nonce",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.invalidate_handle",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "openid.assoc_handle",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.signed",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.sig",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "303": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "500": {
            "description": "Something unexpected happened. This is a bug; please report it."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Admin": {
        "type": "object",
        "description": "Response body for `/admins` endpoints.",
        "required": [
          "name",
          "steam_id",
          "roles"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The admin's latest known name."
          },
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "description": "The admin's roles."
          }
        }
      },
      "Ban": {
        "type": "object",
        "description": "A player ban.",
        "required": [
          "id",
          "player",
          "reason",
          "plugin_version",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The ban's ID.",
            "minimum": 0
          },
          "player": {
            "$ref": "#/components/schemas/BannedPlayer"
          },
          "reason": {
            "$ref": "#/components/schemas/BanReason"
          },
          "server": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ],
            "nullable": true
          },
          "plugin_version": {
            "type": "string",
            "description": "The cs2kz plugin version at the time of the ban.\n\nThis is either the version the [`server`] was currently running on, or the latest\ncurrent version, if they player got banned by an admin directly.\n\n[`server`]: Ban::server"
          },
          "banned_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ],
            "nullable": true
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this ban was issued."
          },
          "expires_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this ban will expire.",
            "nullable": true
          },
          "unban": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Unban"
              }
            ],
            "nullable": true
          }
        }
      },
      "BanUpdate": {
        "type": "object",
        "description": "Request body for updates to a ban.",
        "properties": {
          "reason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BanReason"
              }
            ],
            "nullable": true
          },
          "expires_on": {
            "type": "string",
            "format": "date-time",
            "description": "A new expiration date.",
            "nullable": true
          }
        }
      },
      "BannedPlayer": {
        "type": "object",
        "required": [
          "steam_id",
          "name"
        ],
        "properties": {
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "name": {
            "type": "string",
            "description": "The player's name."
          },
          "ip_address": {
            "type": "string",
            "description": "The player's IP address at the time of their ban.",
            "nullable": true
          }
        }
      },
      "Course": {
        "type": "object",
        "description": "A map course.",
        "required": [
          "id",
          "stage",
          "mappers",
          "filters"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The course's ID.",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The course's name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The course's description.",
            "nullable": true
          },
          "stage": {
            "type": "integer",
            "format": "uint8",
            "description": "The course's stage.",
            "minimum": 1
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Player"
            },
            "description": "List of the players who have contributed to creating this course."
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "description": "List of filters that apply to this course."
          }
        }
      },
      "CourseUpdate": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The course's ID.",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "New name for the course.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "New description for the course.",
            "nullable": true
          },
          "added_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of mappers to add."
          },
          "removed_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of mappers to remove."
          },
          "filter_updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterUpdate"
            },
            "description": "List of updates to filters."
          }
        }
      },
      "CreatedBan": {
        "type": "object",
        "description": "Response body for a newly created player ban.\n\nSee [`NewBan`].",
        "required": [
          "ban_id",
          "expires_on"
        ],
        "properties": {
          "ban_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The ban's ID.",
            "minimum": 0
          },
          "expires_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this ban will expire."
          }
        }
      },
      "CreatedServer": {
        "type": "object",
        "description": "A newly approved KZ server.\n\nSee [`NewServer`].",
        "required": [
          "server_id",
          "api_key"
        ],
        "properties": {
          "server_id": {
            "type": "integer",
            "format": "uint16",
            "description": "The server's ID.",
            "minimum": 0
          },
          "api_key": {
            "type": "integer",
            "format": "uint32",
            "description": "The server's semi-permanent API Key.",
            "minimum": 1
          }
        }
      },
      "CreatedUnban": {
        "type": "object",
        "description": "Response body for a reverted ban.",
        "required": [
          "ban_id",
          "unban_id"
        ],
        "properties": {
          "ban_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The ban that was reverted by this unban.",
            "minimum": 0
          },
          "unban_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The unban's ID.",
            "minimum": 0
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "detail": {}
        }
      },
      "Filter": {
        "type": "object",
        "description": "A course filter.",
        "required": [
          "id",
          "mode",
          "teleports",
          "tier",
          "ranked_status"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The filter's ID.",
            "minimum": 0
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "teleports": {
            "type": "boolean",
            "description": "Whether this filter is for standard or pro runs."
          },
          "tier": {
            "$ref": "#/components/schemas/Tier"
          },
          "ranked_status": {
            "$ref": "#/components/schemas/RankedStatus"
          },
          "notes": {
            "type": "string",
            "description": "Notes about this filter.",
            "nullable": true
          }
        }
      },
      "FilterUpdate": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The filter's ID.",
            "minimum": 0
          },
          "tier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tier"
              }
            ],
            "nullable": true
          },
          "ranked_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RankedStatus"
              }
            ],
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "New notes for the course.",
            "nullable": true
          }
        }
      },
      "GlobalStatus": {
        "type": "string",
        "description": "Global status of a map.",
        "enum": [
          "not_global",
          "in_testing",
          "global"
        ]
      },
      "Jumpstat": {
        "type": "string",
        "enum": [
          "longjump",
          "single_bhop",
          "multi_bhop",
          "weirdjump",
          "ladderjump",
          "ladderhop"
        ]
      },
      "KZMap": {
        "type": "object",
        "description": "A KZ map.",
        "required": [
          "id",
          "workshop_id",
          "name",
          "mappers",
          "courses",
          "global_status",
          "checksum",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint16",
            "description": "The map's ID.",
            "minimum": 0
          },
          "workshop_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The map's Steam Workshop ID.",
            "minimum": 1
          },
          "name": {
            "type": "string",
            "description": "The map's name."
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Player"
            },
            "description": "List of players who have contributed to creating this map."
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Course"
            },
            "description": "List of courses which are part of this map."
          },
          "global_status": {
            "$ref": "#/components/schemas/GlobalStatus"
          },
          "description": {
            "type": "string",
            "description": "The map's description.",
            "nullable": true
          },
          "checksum": {
            "type": "integer",
            "format": "uint32",
            "description": "The map's unique checksum.\n\nThis is calculated by running the map's `.vpk` file through [crc32].\n\n[crc32]: https://en.wikipedia.org/wiki/Cyclic_redundancy_check",
            "minimum": 0
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this map was approved for globalling."
          }
        }
      },
      "Limit": {
        "type": "integer",
        "format": "uint64",
        "description": "Utility type for extracting a \"limit\" query parameter.",
        "minimum": 0
      },
      "MapIdentifier": {
        "oneOf": [
          {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          {
            "type": "string"
          }
        ]
      },
      "MapUpdate": {
        "type": "object",
        "description": "Request body for updates to a map.",
        "properties": {
          "global_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GlobalStatus"
              }
            ],
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "New description for the map.",
            "nullable": true
          },
          "workshop_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NonZeroU32"
              }
            ],
            "nullable": true
          },
          "check_steam": {
            "type": "boolean",
            "description": "Fetch the latest version of the map from Steam and update its name and checksum."
          },
          "added_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of mappers to add."
          },
          "removed_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of mappers to remove."
          },
          "course_updates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseUpdate"
            },
            "description": "List of course updates."
          }
        }
      },
      "Mode": {
        "type": "string",
        "enum": [
          "vanilla",
          "classic"
        ]
      },
      "NewBan": {
        "type": "object",
        "description": "Request body for a new player ban.",
        "required": [
          "steam_id",
          "reason"
        ],
        "properties": {
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "ip_address": {
            "type": "string",
            "description": "The player's IP address.",
            "nullable": true
          },
          "reason": {
            "$ref": "#/components/schemas/BanReason"
          }
        }
      },
      "NewCourse": {
        "type": "object",
        "required": [
          "stage",
          "mappers",
          "filters"
        ],
        "properties": {
          "stage": {
            "type": "integer",
            "format": "uint8",
            "description": "The course's stage.",
            "minimum": 1
          },
          "name": {
            "type": "string",
            "description": "The course's name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the course.",
            "nullable": true
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of players who have contributed to creating this course."
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewFilter"
            },
            "description": "List of filters for this course."
          }
        }
      },
      "NewFilter": {
        "type": "object",
        "required": [
          "mode",
          "teleports",
          "tier",
          "ranked_status"
        ],
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "teleports": {
            "type": "boolean",
            "description": "Whether this filter is for standard or pro runs."
          },
          "tier": {
            "$ref": "#/components/schemas/Tier"
          },
          "ranked_status": {
            "$ref": "#/components/schemas/RankedStatus"
          },
          "notes": {
            "type": "string",
            "description": "Notes about the filter.",
            "nullable": true
          }
        }
      },
      "NewMap": {
        "type": "object",
        "description": "The request body for creating a new map.",
        "required": [
          "workshop_id",
          "global_status",
          "mappers",
          "courses"
        ],
        "properties": {
          "workshop_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The map's workshop ID.",
            "minimum": 1
          },
          "global_status": {
            "$ref": "#/components/schemas/GlobalStatus"
          },
          "description": {
            "type": "string",
            "description": "Description of the map.",
            "nullable": true
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of players who have contributed to creating this map."
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewCourse"
            },
            "description": "List of courses."
          }
        }
      },
      "NewPlayer": {
        "type": "object",
        "description": "Request body for registering new KZ players.",
        "required": [
          "steam_id",
          "name",
          "ip_address"
        ],
        "properties": {
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "name": {
            "type": "string",
            "description": "The player's current name."
          },
          "ip_address": {
            "type": "string",
            "description": "The player's current IP address."
          }
        }
      },
      "NewServer": {
        "type": "object",
        "description": "Request body for newly approved servers.",
        "required": [
          "name",
          "ip_address",
          "owned_by"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The server's name."
          },
          "ip_address": {
            "type": "string",
            "description": "The server's IP address."
          },
          "owned_by": {
            "$ref": "#/components/schemas/SteamID"
          }
        }
      },
      "NewUnban": {
        "type": "object",
        "description": "Request body for reverting a ban.",
        "required": [
          "reason"
        ],
        "properties": {
          "reason": {
            "type": "string",
            "description": "The reason for the unban."
          }
        }
      },
      "Offset": {
        "type": "integer",
        "format": "int64",
        "description": "Utility type for extracting an \"offset\" query parameter."
      },
      "Player": {
        "type": "object",
        "description": "Basic information about a KZ player.\n\nThis is included as a field inside many other types.",
        "required": [
          "steam_id",
          "name"
        ],
        "properties": {
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "name": {
            "type": "string",
            "description": "The player's latest known name."
          }
        }
      },
      "PlayerIdentifier": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SteamID"
          },
          {
            "type": "string"
          }
        ]
      },
      "RankedStatus": {
        "type": "string",
        "description": "Ranked status of a [`Filter`].\n\n[`Filter`]: crate::maps::models::Filter",
        "enum": [
          "never",
          "unranked",
          "ranked"
        ]
      },
      "Role": {
        "type": "string",
        "description": "The available roles as a descriptive enum.",
        "enum": [
          "bans",
          "servers",
          "maps",
          "admin"
        ]
      },
      "RoleFlags": {
        "type": "integer",
        "format": "uint32",
        "description": "Bitfield as [`Role`]s are stored in the database.",
        "minimum": 0
      },
      "Server": {
        "type": "object",
        "description": "Response body for fetching KZ servers.",
        "required": [
          "id",
          "name",
          "ip_address",
          "owned_by",
          "approved_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint16",
            "description": "The server's ID.",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The server's name."
          },
          "ip_address": {
            "type": "string",
            "description": "The server's IP address."
          },
          "owned_by": {
            "$ref": "#/components/schemas/Player"
          },
          "approved_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this server was approved."
          }
        }
      },
      "ServerIdentifier": {
        "oneOf": [
          {
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          {
            "type": "string"
          }
        ]
      },
      "ServerUpdate": {
        "type": "object",
        "description": "Request body for updates to a server.",
        "properties": {
          "name": {
            "type": "string",
            "description": "A new name for the server.",
            "nullable": true
          },
          "ip_address": {
            "type": "string",
            "description": "A new IP address for the server.",
            "nullable": true
          },
          "owned_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SteamID"
              }
            ],
            "nullable": true
          }
        }
      },
      "SteamID": {
        "type": "string"
      },
      "Style": {
        "type": "string",
        "enum": [
          "normal",
          "backwards",
          "sideways",
          "wonly"
        ]
      },
      "Tier": {
        "type": "string",
        "enum": [
          "very_easy",
          "easy",
          "medium",
          "advanced",
          "hard",
          "very_hard",
          "extreme",
          "death",
          "unfeasible",
          "impossible"
        ]
      },
      "Unban": {
        "type": "object",
        "description": "A reverted ban.",
        "required": [
          "id",
          "reason",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The ID of this unban.",
            "minimum": 0
          },
          "reason": {
            "type": "string",
            "description": "The reason for the unban."
          },
          "unbanned_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ],
            "nullable": true
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this unban was created."
          }
        }
      }
    },
    "securitySchemes": {
      "CS2 Server JWT": {
        "type": "http",
        "scheme": "bearer"
      },
      "Steam Session": {
        "type": "apiKey",
        "in": "cookie",
        "name": "kz-auth"
      }
    }
  }
}