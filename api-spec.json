{
  "openapi": "3.0.3",
  "info": {
    "title": "CS2KZ API",
    "description": "Source Code available on [GitHub](https://github.com/KZGlobalTeam/cs2kz-api).",
    "contact": {
      "name": "AlphaKeks",
      "email": "alphakeks@dawn.sh"
    },
    "license": {
      "name": "Licensed under the GPLv3",
      "url": "https://www.gnu.org/licenses/gpl-3.0"
    },
    "version": "0.0.0"
  },
  "paths": {
    "/players": {
      "get": {
        "tags": [
          "Players"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of returned results.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Paginate by `offset` entries.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A KZ player.",
                  "required": [
                    "name",
                    "steam_id",
                    "is_banned"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The player's name."
                    },
                    "steam_id": {
                      "$ref": "#/components/schemas/SteamID"
                    },
                    "ip_address": {
                      "type": "string",
                      "description": "The player's IP address.",
                      "nullable": true
                    },
                    "is_banned": {
                      "type": "boolean",
                      "description": "Whether the player is currently banned."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Players"
        ],
        "operationId": "post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlayer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "CS2 Server": []
          }
        ]
      }
    },
    "/players/{player}": {
      "get": {
        "tags": [
          "Players"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "player",
            "in": "path",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SteamID"
                },
                {
                  "type": "string",
                  "description": "A player's name."
                }
              ],
              "description": "Players are usually identified by their [SteamID], which is unique, or their name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A KZ player.",
                  "required": [
                    "name",
                    "steam_id",
                    "is_banned"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The player's name."
                    },
                    "steam_id": {
                      "$ref": "#/components/schemas/SteamID"
                    },
                    "ip_address": {
                      "type": "string",
                      "description": "The player's IP address.",
                      "nullable": true
                    },
                    "is_banned": {
                      "type": "boolean",
                      "description": "Whether the player is currently banned."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/players/{steam_id}": {
      "patch": {
        "tags": [
          "Players"
        ],
        "operationId": "patch",
        "parameters": [
          {
            "name": "steam_id",
            "in": "path",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "title": "Steam ID",
                  "example": "STEAM_1:1:161178172"
                },
                {
                  "type": "string",
                  "title": "Steam ID3",
                  "example": "U:1:322356345"
                },
                {
                  "type": "integer",
                  "title": "Steam ID32",
                  "example": 322356345
                },
                {
                  "type": "integer",
                  "title": "Steam ID64",
                  "example": 76561198282622073
                }
              ],
              "description": "a player's SteamID",
              "example": "STEAM_1:1:161178172"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlayerUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "CS2 Server": []
          }
        ]
      }
    },
    "/players/{player}/preferences": {
      "get": {
        "tags": [
          "Players"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "player",
            "in": "path",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SteamID"
                },
                {
                  "type": "string",
                  "description": "A player's name."
                }
              ],
              "description": "Players are usually identified by their [SteamID], which is unique, or their name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Object",
                  "description": "arbitrary key-value pairs"
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/players/{steam_id}/preferences": {
      "put": {
        "tags": [
          "Players"
        ],
        "operationId": "put",
        "parameters": [
          {
            "name": "steam_id",
            "in": "path",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "title": "Steam ID",
                  "example": "STEAM_1:1:161178172"
                },
                {
                  "type": "string",
                  "title": "Steam ID3",
                  "example": "U:1:322356345"
                },
                {
                  "type": "integer",
                  "title": "Steam ID32",
                  "example": 322356345
                },
                {
                  "type": "integer",
                  "title": "Steam ID64",
                  "example": 76561198282622073
                }
              ],
              "description": "a player's SteamID",
              "example": "STEAM_1:1:161178172"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JsonValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "CS2 Server": []
          }
        ]
      }
    },
    "/maps": {
      "get": {
        "tags": [
          "Maps"
        ],
        "operationId": "get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A KZ map.\n\nThe only reason this is named `FullMap` instead of just `Map`, is because `utoipa` macros are\nstupid.",
                  "required": [
                    "id",
                    "name",
                    "global_status",
                    "workshop_id",
                    "checksum",
                    "mappers",
                    "courses",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The map's ID.",
                      "minimum": 0
                    },
                    "name": {
                      "type": "string",
                      "description": "The map's name."
                    },
                    "description": {
                      "type": "string",
                      "description": "The map's description.",
                      "nullable": true
                    },
                    "global_status": {
                      "$ref": "#/components/schemas/GlobalStatus"
                    },
                    "workshop_id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The map's workshop ID.",
                      "minimum": 0
                    },
                    "checksum": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The map's checksum.",
                      "minimum": 0
                    },
                    "mappers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Player"
                      },
                      "description": "List of players who have contributed to the creation of this map."
                    },
                    "courses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Course"
                      },
                      "description": "List of courses on this map."
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this map was approved."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Maps"
        ],
        "operationId": "put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewMap"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly created map.",
                  "required": [
                    "map_id"
                  ],
                  "properties": {
                    "map_id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The map's ID.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Browser Session": [
              "maps"
            ]
          }
        ]
      }
    },
    "/maps/{map}": {
      "get": {
        "tags": [
          "Maps"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "map",
            "in": "path",
            "required": false,
            "schema": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "uint16",
                  "description": "A map's ID.",
                  "minimum": 0
                },
                {
                  "type": "string",
                  "description": "A map's name."
                }
              ],
              "description": "Maps are either identified by their ID, which is unique, or their name."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A KZ map.\n\nThe only reason this is named `FullMap` instead of just `Map`, is because `utoipa` macros are\nstupid.",
                  "required": [
                    "id",
                    "name",
                    "global_status",
                    "workshop_id",
                    "checksum",
                    "mappers",
                    "courses",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The map's ID.",
                      "minimum": 0
                    },
                    "name": {
                      "type": "string",
                      "description": "The map's name."
                    },
                    "description": {
                      "type": "string",
                      "description": "The map's description.",
                      "nullable": true
                    },
                    "global_status": {
                      "$ref": "#/components/schemas/GlobalStatus"
                    },
                    "workshop_id": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The map's workshop ID.",
                      "minimum": 0
                    },
                    "checksum": {
                      "type": "integer",
                      "format": "uint32",
                      "description": "The map's checksum.",
                      "minimum": 0
                    },
                    "mappers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Player"
                      },
                      "description": "List of players who have contributed to the creation of this map."
                    },
                    "courses": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Course"
                      },
                      "description": "List of courses on this map."
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this map was approved."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/maps/{map_id}": {
      "patch": {
        "tags": [
          "Maps"
        ],
        "operationId": "patch",
        "parameters": [
          {
            "name": "map_id",
            "in": "path",
            "description": "The map's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "409": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Browser Session": [
              "maps"
            ]
          }
        ]
      }
    },
    "/servers": {
      "get": {
        "tags": [
          "Servers"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name.",
            "required": false,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "ip_address",
            "in": "query",
            "description": "Filter by IP address.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ipv4Addr"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "owned_by",
            "in": "query",
            "description": "Filter by server owner.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Filter by creation date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Filter by creation date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of returned results.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Paginate by `offset` entries.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "An approved CS2 server.",
                  "required": [
                    "id",
                    "name",
                    "ip_address",
                    "owner",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The server's ID.",
                      "minimum": 0
                    },
                    "name": {
                      "type": "string",
                      "description": "The server's name."
                    },
                    "ip_address": {
                      "type": "string",
                      "description": "The server's IP address and port."
                    },
                    "owner": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this server was approved."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Servers"
        ],
        "operationId": "post",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewServer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly created server.",
                  "required": [
                    "server_id",
                    "refresh_key"
                  ],
                  "properties": {
                    "server_id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The server's ID.",
                      "minimum": 0
                    },
                    "refresh_key": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The server's \"permanent\" refresh key."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Browser Session": [
              "servers"
            ]
          }
        ]
      }
    },
    "/servers/{server}": {
      "get": {
        "tags": [
          "Servers"
        ],
        "operationId": "get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "An approved CS2 server.",
                  "required": [
                    "id",
                    "name",
                    "ip_address",
                    "owner",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The server's ID.",
                      "minimum": 0
                    },
                    "name": {
                      "type": "string",
                      "description": "The server's name."
                    },
                    "ip_address": {
                      "type": "string",
                      "description": "The server's IP address and port."
                    },
                    "owner": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this server was approved."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Servers"
        ],
        "operationId": "patch",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServerUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Browser Session": [
              "servers"
            ]
          }
        ]
      }
    },
    "/servers/key": {
      "post": {
        "tags": [
          "Servers"
        ],
        "operationId": "generate_temp",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "https://jwt.io"
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/servers/{server_id}/key": {
      "put": {
        "tags": [
          "Servers"
        ],
        "operationId": "put_perma",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "description": "The server's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Browser Session": [
              "servers"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Servers"
        ],
        "operationId": "delete_perma",
        "parameters": [
          {
            "name": "server_id",
            "in": "path",
            "description": "The server's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Browser Session": [
              "servers"
            ]
          }
        ]
      }
    },
    "/jumpstats": {
      "get": {
        "tags": [
          "Jumpstats"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Filter by jump type.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/JumpType"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "Filter by mode.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Mode"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "style",
            "in": "query",
            "description": "Filter by style.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Style"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "minimum_distance",
            "in": "query",
            "description": "Filter by a minimum distance.",
            "required": false,
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            }
          },
          {
            "name": "player",
            "in": "query",
            "description": "Filter by player.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "Filter by server.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Filter by creation date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Filter by creation date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of returned results.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Paginate by `offset` entries.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A jumpstat.",
                  "required": [
                    "id",
                    "type",
                    "mode",
                    "style",
                    "player",
                    "server",
                    "strafes",
                    "distance",
                    "sync",
                    "pre",
                    "max",
                    "overlap",
                    "bad_angles",
                    "dead_air",
                    "height",
                    "airpath",
                    "deviation",
                    "average_width",
                    "airtime",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The jumpstat's ID.",
                      "minimum": 0
                    },
                    "type": {
                      "$ref": "#/components/schemas/JumpType"
                    },
                    "mode": {
                      "$ref": "#/components/schemas/Mode"
                    },
                    "style": {
                      "$ref": "#/components/schemas/Style"
                    },
                    "player": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "server": {
                      "$ref": "#/components/schemas/ServerInfo"
                    },
                    "strafes": {
                      "type": "integer",
                      "format": "uint8",
                      "description": "The amount of strafes done in this jump.",
                      "minimum": 0
                    },
                    "distance": {
                      "type": "number",
                      "format": "float",
                      "description": "The jump's distance."
                    },
                    "sync": {
                      "type": "number",
                      "format": "float",
                      "description": "The % of how much airtime was spent gaining speed."
                    },
                    "pre": {
                      "type": "number",
                      "format": "float",
                      "description": "The jump's speed at jumpoff."
                    },
                    "max": {
                      "type": "number",
                      "format": "float",
                      "description": "The maximum speed during the jump."
                    },
                    "overlap": {
                      "type": "number",
                      "format": "float",
                      "description": "The % of how much airtime was spent pressing both directional keys at once."
                    },
                    "bad_angles": {
                      "type": "number",
                      "format": "float",
                      "description": "The % of how much airtime keys were pressed but no speed was gained."
                    },
                    "dead_air": {
                      "type": "number",
                      "format": "float",
                      "description": "The % of how much airtime was spent not gaining speed."
                    },
                    "height": {
                      "type": "number",
                      "format": "float",
                      "description": "The maximum height during this jump (in units)."
                    },
                    "airpath": {
                      "type": "number",
                      "format": "float",
                      "description": "How close to a perfect airpath this jump was.\n\nThe closer to 1.0 the better."
                    },
                    "deviation": {
                      "type": "number",
                      "format": "float",
                      "description": "How far the landing point deviates from the jumpoff point."
                    },
                    "average_width": {
                      "type": "number",
                      "format": "float",
                      "description": "The average strafe width."
                    },
                    "airtime": {
                      "type": "string",
                      "description": "How much time the player spent in the air."
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this jump was submitted."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Jumpstats"
        ],
        "operationId": "post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewJumpstat"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly created jumpstat.",
                  "required": [
                    "jumpstat_id"
                  ],
                  "properties": {
                    "jumpstat_id": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The jumpstat's ID.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "CS2 Server": []
          }
        ]
      }
    },
    "/jumpstats/{jumpstat_id}": {
      "get": {
        "tags": [
          "Jumpstats"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "jumpstat_id",
            "in": "path",
            "description": "The jumpstat's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A jumpstat.",
                  "required": [
                    "id",
                    "type",
                    "mode",
                    "style",
                    "player",
                    "server",
                    "strafes",
                    "distance",
                    "sync",
                    "pre",
                    "max",
                    "overlap",
                    "bad_angles",
                    "dead_air",
                    "height",
                    "airpath",
                    "deviation",
                    "average_width",
                    "airtime",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The jumpstat's ID.",
                      "minimum": 0
                    },
                    "type": {
                      "$ref": "#/components/schemas/JumpType"
                    },
                    "mode": {
                      "$ref": "#/components/schemas/Mode"
                    },
                    "style": {
                      "$ref": "#/components/schemas/Style"
                    },
                    "player": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "server": {
                      "$ref": "#/components/schemas/ServerInfo"
                    },
                    "strafes": {
                      "type": "integer",
                      "format": "uint8",
                      "description": "The amount of strafes done in this jump.",
                      "minimum": 0
                    },
                    "distance": {
                      "type": "number",
                      "format": "float",
                      "description": "The jump's distance."
                    },
                    "sync": {
                      "type": "number",
                      "format": "float",
                      "description": "The % of how much airtime was spent gaining speed."
                    },
                    "pre": {
                      "type": "number",
                      "format": "float",
                      "description": "The jump's speed at jumpoff."
                    },
                    "max": {
                      "type": "number",
                      "format": "float",
                      "description": "The maximum speed during the jump."
                    },
                    "overlap": {
                      "type": "number",
                      "format": "float",
                      "description": "The % of how much airtime was spent pressing both directional keys at once."
                    },
                    "bad_angles": {
                      "type": "number",
                      "format": "float",
                      "description": "The % of how much airtime keys were pressed but no speed was gained."
                    },
                    "dead_air": {
                      "type": "number",
                      "format": "float",
                      "description": "The % of how much airtime was spent not gaining speed."
                    },
                    "height": {
                      "type": "number",
                      "format": "float",
                      "description": "The maximum height during this jump (in units)."
                    },
                    "airpath": {
                      "type": "number",
                      "format": "float",
                      "description": "How close to a perfect airpath this jump was.\n\nThe closer to 1.0 the better."
                    },
                    "deviation": {
                      "type": "number",
                      "format": "float",
                      "description": "How far the landing point deviates from the jumpoff point."
                    },
                    "average_width": {
                      "type": "number",
                      "format": "float",
                      "description": "The average strafe width."
                    },
                    "airtime": {
                      "type": "string",
                      "description": "How much time the player spent in the air."
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this jump was submitted."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/jumpstats/{jumpstat_id}/replay": {
      "get": {
        "tags": [
          "Jumpstats"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "jumpstat_id",
            "in": "path",
            "description": "The jumpstat's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/records": {
      "get": {
        "tags": [
          "Records"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "mode",
            "in": "query",
            "description": "Filter by mode.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Mode"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "style",
            "in": "query",
            "description": "Filter by style.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Style"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "teleports",
            "in": "query",
            "description": "Filter by whether teleports where used.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "player",
            "in": "query",
            "description": "Filter by player.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "Filter by server.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Filter by creation date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Filter by creation date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of returned results.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Paginate by `offset` entries.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A record (or \"run\").",
                  "required": [
                    "id",
                    "mode",
                    "style",
                    "teleports",
                    "time",
                    "player",
                    "map",
                    "course",
                    "server",
                    "bhop_stats",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The record's ID:",
                      "minimum": 0
                    },
                    "mode": {
                      "$ref": "#/components/schemas/Mode"
                    },
                    "style": {
                      "$ref": "#/components/schemas/Style"
                    },
                    "teleports": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The amount of teleports used during this run.",
                      "minimum": 0
                    },
                    "time": {
                      "type": "string",
                      "description": "The time it took to complete this run."
                    },
                    "player": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "map": {
                      "$ref": "#/components/schemas/MapInfo"
                    },
                    "course": {
                      "$ref": "#/components/schemas/CourseInfo"
                    },
                    "server": {
                      "$ref": "#/components/schemas/ServerInfo"
                    },
                    "bhop_stats": {
                      "$ref": "#/components/schemas/BhopStats"
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this run was submitted."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Records"
        ],
        "operationId": "post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRecord"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly created record.",
                  "required": [
                    "record_id"
                  ],
                  "properties": {
                    "record_id": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The record's ID.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "CS2 Server": []
          }
        ]
      }
    },
    "/records/top": {
      "get": {
        "tags": [
          "Records"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "mode",
            "in": "query",
            "description": "Filter by mode.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Mode"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "style",
            "in": "query",
            "description": "Filter by style.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Style"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "teleports",
            "in": "query",
            "description": "Filter by whether teleports where used.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "player",
            "in": "query",
            "description": "Filter by player.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "Filter by server.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Filter by creation date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Filter by creation date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of returned results.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Paginate by `offset` entries.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A record (or \"run\").",
                  "required": [
                    "id",
                    "mode",
                    "style",
                    "teleports",
                    "time",
                    "player",
                    "map",
                    "course",
                    "server",
                    "bhop_stats",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The record's ID:",
                      "minimum": 0
                    },
                    "mode": {
                      "$ref": "#/components/schemas/Mode"
                    },
                    "style": {
                      "$ref": "#/components/schemas/Style"
                    },
                    "teleports": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The amount of teleports used during this run.",
                      "minimum": 0
                    },
                    "time": {
                      "type": "string",
                      "description": "The time it took to complete this run."
                    },
                    "player": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "map": {
                      "$ref": "#/components/schemas/MapInfo"
                    },
                    "course": {
                      "$ref": "#/components/schemas/CourseInfo"
                    },
                    "server": {
                      "$ref": "#/components/schemas/ServerInfo"
                    },
                    "bhop_stats": {
                      "$ref": "#/components/schemas/BhopStats"
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this run was submitted."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/records/{record_id}": {
      "get": {
        "tags": [
          "Records"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "record_id",
            "in": "path",
            "description": "The record's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A record (or \"run\").",
                  "required": [
                    "id",
                    "mode",
                    "style",
                    "teleports",
                    "time",
                    "player",
                    "map",
                    "course",
                    "server",
                    "bhop_stats",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The record's ID:",
                      "minimum": 0
                    },
                    "mode": {
                      "$ref": "#/components/schemas/Mode"
                    },
                    "style": {
                      "$ref": "#/components/schemas/Style"
                    },
                    "teleports": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The amount of teleports used during this run.",
                      "minimum": 0
                    },
                    "time": {
                      "type": "string",
                      "description": "The time it took to complete this run."
                    },
                    "player": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "map": {
                      "$ref": "#/components/schemas/MapInfo"
                    },
                    "course": {
                      "$ref": "#/components/schemas/CourseInfo"
                    },
                    "server": {
                      "$ref": "#/components/schemas/ServerInfo"
                    },
                    "bhop_stats": {
                      "$ref": "#/components/schemas/BhopStats"
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this run was submitted."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/records/{record_id}/replay": {
      "get": {
        "tags": [
          "Records"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "record_id",
            "in": "path",
            "description": "The record's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/bans": {
      "get": {
        "tags": [
          "Bans"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "player",
            "in": "query",
            "description": "Filter by player.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "server",
            "in": "query",
            "description": "Filter by server.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "reason",
            "in": "query",
            "description": "Filter by ban reason.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BanReason"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "unbanned",
            "in": "query",
            "description": "Filter by bans that have already been reverted.",
            "required": false,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "banned_by",
            "in": "query",
            "description": "Filter by admins responseible for bans.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "unbanned_by",
            "in": "query",
            "description": "Filter by admins responseible for unbans.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerIdentifier"
                }
              ],
              "nullable": true
            }
          },
          {
            "name": "created_after",
            "in": "query",
            "description": "Filter by creation date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "created_before",
            "in": "query",
            "description": "Filter by creation date.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of returned results.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Paginate by `offset` entries.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A player ban.",
                  "required": [
                    "id",
                    "player",
                    "reason",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The ban's ID.",
                      "minimum": 0
                    },
                    "player": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "server": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ServerInfo"
                        }
                      ],
                      "nullable": true
                    },
                    "reason": {
                      "$ref": "#/components/schemas/BanReason"
                    },
                    "admin": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Player"
                        }
                      ],
                      "nullable": true
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban was submitted."
                    },
                    "expires_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban will expire.",
                      "nullable": true
                    },
                    "unban": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Unban"
                        }
                      ],
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "Bans"
        ],
        "operationId": "post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBan"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly created ban.",
                  "required": [
                    "ban_id"
                  ],
                  "properties": {
                    "ban_id": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The ban's ID.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Browser Session": [
              "bans"
            ]
          }
        ]
      }
    },
    "/bans/{ban_id}": {
      "get": {
        "tags": [
          "Bans"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "ban_id",
            "in": "path",
            "description": "The ban's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A player ban.",
                  "required": [
                    "id",
                    "player",
                    "reason",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The ban's ID.",
                      "minimum": 0
                    },
                    "player": {
                      "$ref": "#/components/schemas/Player"
                    },
                    "server": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/ServerInfo"
                        }
                      ],
                      "nullable": true
                    },
                    "reason": {
                      "$ref": "#/components/schemas/BanReason"
                    },
                    "admin": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Player"
                        }
                      ],
                      "nullable": true
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban was submitted."
                    },
                    "expires_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this ban will expire.",
                      "nullable": true
                    },
                    "unban": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Unban"
                        }
                      ],
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      },
      "patch": {
        "tags": [
          "Bans"
        ],
        "operationId": "patch",
        "parameters": [
          {
            "name": "ban_id",
            "in": "path",
            "description": "The ban's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BanUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "409": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Browser Session": [
              "bans"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Bans"
        ],
        "operationId": "delete",
        "parameters": [
          {
            "name": "ban_id",
            "in": "path",
            "description": "The ban's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewUnban"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly reverted ban.",
                  "required": [
                    "unban_id"
                  ],
                  "properties": {
                    "unban_id": {
                      "type": "integer",
                      "format": "uint64",
                      "description": "The unban's ID.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "409": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Browser Session": [
              "bans"
            ]
          }
        ]
      }
    },
    "/sessions/{session_id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "sesion_id",
            "in": "path",
            "description": "The session's ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/auth/login": {
      "get": {
        "tags": [
          "Auth"
        ],
        "operationId": "login",
        "parameters": [
          {
            "name": "redirect_to",
            "in": "query",
            "description": "Where the user wants to be redirected to after the login process is done.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri"
            }
          }
        ],
        "responses": {
          "303": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": [
          "Auth"
        ],
        "operationId": "logout",
        "parameters": [
          {
            "name": "invalidate_all_sessions",
            "in": "query",
            "description": "Whether *all* previous sessions should be invalidated.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "303": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Browser Session": []
          }
        ]
      }
    },
    "/auth/callback": {
      "get": {
        "tags": [
          "Auth"
        ],
        "operationId": "callback",
        "parameters": [
          {
            "name": "openid.ns",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.identity",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "openid.claimed_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "openid.mode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.return_to",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uri"
            }
          },
          {
            "name": "openid.op_endpoint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.response_nonce",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.invalidate_handle",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "openid.assoc_handle",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.signed",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "openid.sig",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "default": null,
                  "nullable": true
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/admins": {
      "get": {
        "tags": [
          "Admins"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "roles",
            "in": "query",
            "description": "Filter by roles.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of returned results.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Paginate by `offset` entries.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A player with special privileges.",
                  "required": [
                    "name",
                    "steam_id",
                    "roles"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The admin's name."
                    },
                    "steam_id": {
                      "$ref": "#/components/schemas/SteamID"
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The admin's roles.",
                      "example": [
                        "bans",
                        "servers"
                      ]
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      }
    },
    "/admins/{steam_id}": {
      "get": {
        "tags": [
          "Admins"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "steam_id",
            "in": "path",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "title": "Steam ID",
                  "example": "STEAM_1:1:161178172"
                },
                {
                  "type": "string",
                  "title": "Steam ID3",
                  "example": "U:1:322356345"
                },
                {
                  "type": "integer",
                  "title": "Steam ID32",
                  "example": 322356345
                },
                {
                  "type": "integer",
                  "title": "Steam ID64",
                  "example": 76561198282622073
                }
              ],
              "description": "a player's SteamID",
              "example": "STEAM_1:1:161178172"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A player with special privileges.",
                  "required": [
                    "name",
                    "steam_id",
                    "roles"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The admin's name."
                    },
                    "steam_id": {
                      "$ref": "#/components/schemas/SteamID"
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The admin's roles.",
                      "example": [
                        "bans",
                        "servers"
                      ]
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      },
      "put": {
        "tags": [
          "Admins"
        ],
        "operationId": "put",
        "parameters": [
          {
            "name": "steam_id",
            "in": "path",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "title": "Steam ID",
                  "example": "STEAM_1:1:161178172"
                },
                {
                  "type": "string",
                  "title": "Steam ID3",
                  "example": "U:1:322356345"
                },
                {
                  "type": "integer",
                  "title": "Steam ID32",
                  "example": 322356345
                },
                {
                  "type": "integer",
                  "title": "Steam ID64",
                  "example": 76561198282622073
                }
              ],
              "description": "a player's SteamID",
              "example": "STEAM_1:1:161178172"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "Browser Session": [
              "admins"
            ]
          }
        ]
      }
    },
    "/plugin/versions": {
      "get": {
        "tags": [
          "CS2KZ Plugin"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit the number of returned results.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Paginate by `offset` entries.",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A CS2KZ plugin version.",
                  "required": [
                    "id",
                    "semver",
                    "git_revision",
                    "created_on"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The version's ID.",
                      "minimum": 0
                    },
                    "semver": {
                      "type": "string",
                      "description": "The semver representation."
                    },
                    "git_revision": {
                      "type": "string",
                      "description": "The corresponding git revision (commit hash)."
                    },
                    "created_on": {
                      "type": "string",
                      "format": "date-time",
                      "description": "When this version was published."
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          },
          "400": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "CS2KZ Plugin"
        ],
        "operationId": "post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPluginVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A newly created plugin version.",
                  "required": [
                    "plugin_version_id"
                  ],
                  "properties": {
                    "plugin_version_id": {
                      "type": "integer",
                      "format": "uint16",
                      "description": "The version's ID.",
                      "minimum": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": ""
          },
          "401": {
            "description": ""
          },
          "409": {
            "description": ""
          },
          "422": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "security": [
          {
            "API Key": [
              "plugin_versions"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Admin": {
        "type": "object",
        "description": "A player with special privileges.",
        "required": [
          "name",
          "steam_id",
          "roles"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The admin's name."
          },
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The admin's roles.",
            "example": [
              "bans",
              "servers"
            ]
          }
        }
      },
      "AdminUpdate": {
        "type": "object",
        "description": "Request body for updating admins.",
        "required": [
          "roles"
        ],
        "properties": {
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "New roles for the admin.",
            "example": [
              "bans",
              "servers"
            ]
          }
        }
      },
      "Ban": {
        "type": "object",
        "description": "A player ban.",
        "required": [
          "id",
          "player",
          "reason",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint64",
            "description": "The ban's ID.",
            "minimum": 0
          },
          "player": {
            "$ref": "#/components/schemas/Player"
          },
          "server": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServerInfo"
              }
            ],
            "nullable": true
          },
          "reason": {
            "$ref": "#/components/schemas/BanReason"
          },
          "admin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ],
            "nullable": true
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this ban was submitted."
          },
          "expires_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this ban will expire.",
            "nullable": true
          },
          "unban": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Unban"
              }
            ],
            "nullable": true
          }
        }
      },
      "BanReason": {
        "type": "string",
        "description": "The different reasons for which players can be banned.",
        "enum": [
          "auto_strafe",
          "auto_bhop"
        ]
      },
      "BanUpdate": {
        "type": "object",
        "description": "Request body for updating bans.",
        "properties": {
          "reason": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BanReason"
              }
            ],
            "nullable": true
          },
          "expires_on": {
            "type": "string",
            "format": "date-time",
            "description": "A new expiration date.\n\nNot specifying this at all means the expiration date will not be modified.\nIf this is explicitly `null`, the expiration date will be deleted and the ban counts as\npermanent.",
            "nullable": true
          }
        }
      },
      "BhopStats": {
        "type": "object",
        "description": "Bhop statistics over a certain time period.",
        "required": [
          "perfs",
          "tick0",
          "tick1",
          "tick2",
          "tick3",
          "tick4",
          "tick5",
          "tick6",
          "tick7",
          "tick8"
        ],
        "properties": {
          "perfs": {
            "type": "integer",
            "format": "uint16",
            "description": "The amount of perfect Bhops.",
            "minimum": 0
          },
          "tick0": {
            "type": "integer",
            "format": "uint16",
            "description": "The amount of scrolls at the exact same tick the player hit the ground.",
            "minimum": 0
          },
          "tick1": {
            "type": "integer",
            "format": "uint16",
            "description": "The amount of scrolls 1 tick after the player hit the ground.",
            "minimum": 0
          },
          "tick2": {
            "type": "integer",
            "format": "uint16",
            "description": "The amount of scrolls 2 ticks after the player hit the ground.",
            "minimum": 0
          },
          "tick3": {
            "type": "integer",
            "format": "uint16",
            "description": "The amount of scrolls 3 ticks after the player hit the ground.",
            "minimum": 0
          },
          "tick4": {
            "type": "integer",
            "format": "uint16",
            "description": "The amount of scrolls 4 ticks after the player hit the ground.",
            "minimum": 0
          },
          "tick5": {
            "type": "integer",
            "format": "uint16",
            "description": "The amount of scrolls 5 ticks after the player hit the ground.",
            "minimum": 0
          },
          "tick6": {
            "type": "integer",
            "format": "uint16",
            "description": "The amount of scrolls 6 ticks after the player hit the ground.",
            "minimum": 0
          },
          "tick7": {
            "type": "integer",
            "format": "uint16",
            "description": "The amount of scrolls 7 ticks after the player hit the ground.",
            "minimum": 0
          },
          "tick8": {
            "type": "integer",
            "format": "uint16",
            "description": "The amount of scrolls 8 ticks after the player hit the ground.",
            "minimum": 0
          }
        }
      },
      "Course": {
        "type": "object",
        "description": "A map course.",
        "required": [
          "id",
          "mappers",
          "filters"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The course's ID.",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The course's name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The course's description.",
            "nullable": true
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Player"
            },
            "description": "List of players who have contributed to the creation of this course."
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "description": "The course's filters."
          }
        }
      },
      "CourseInfo": {
        "type": "object",
        "description": "Information about a course.",
        "required": [
          "id",
          "tier"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The course's ID.",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The course's name.",
            "nullable": true
          },
          "tier": {
            "$ref": "#/components/schemas/Tier"
          }
        }
      },
      "CourseUpdate": {
        "type": "object",
        "description": "Request body for updating courses.",
        "properties": {
          "name": {
            "type": "string",
            "description": "A new name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A new description.",
            "nullable": true
          },
          "added_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "Players to be added as mappers of this course.",
            "nullable": true
          },
          "removed_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "Players to be removed as mappers of this course.",
            "nullable": true
          },
          "filter_updates": {
            "type": "object",
            "description": "Updates to any filters of this course.",
            "additionalProperties": {
              "$ref": "#/components/schemas/FilterUpdate"
            },
            "example": {
              "1": {
                "name": "foobar"
              },
              "2": {
                "description": "cool course!"
              }
            },
            "nullable": true
          }
        }
      },
      "CreatedBan": {
        "type": "object",
        "description": "A newly created ban.",
        "required": [
          "ban_id"
        ],
        "properties": {
          "ban_id": {
            "type": "integer",
            "format": "uint64",
            "description": "The ban's ID.",
            "minimum": 0
          }
        }
      },
      "CreatedJumpstat": {
        "type": "object",
        "description": "A newly created jumpstat.",
        "required": [
          "jumpstat_id"
        ],
        "properties": {
          "jumpstat_id": {
            "type": "integer",
            "format": "uint64",
            "description": "The jumpstat's ID.",
            "minimum": 0
          }
        }
      },
      "CreatedMap": {
        "type": "object",
        "description": "A newly created map.",
        "required": [
          "map_id"
        ],
        "properties": {
          "map_id": {
            "type": "integer",
            "format": "uint16",
            "description": "The map's ID.",
            "minimum": 0
          }
        }
      },
      "CreatedPluginVersion": {
        "type": "object",
        "description": "A newly created plugin version.",
        "required": [
          "plugin_version_id"
        ],
        "properties": {
          "plugin_version_id": {
            "type": "integer",
            "format": "uint16",
            "description": "The version's ID.",
            "minimum": 0
          }
        }
      },
      "CreatedRecord": {
        "type": "object",
        "description": "A newly created record.",
        "required": [
          "record_id"
        ],
        "properties": {
          "record_id": {
            "type": "integer",
            "format": "uint64",
            "description": "The record's ID.",
            "minimum": 0
          }
        }
      },
      "CreatedServer": {
        "type": "object",
        "description": "A newly created server.",
        "required": [
          "server_id",
          "refresh_key"
        ],
        "properties": {
          "server_id": {
            "type": "integer",
            "format": "uint16",
            "description": "The server's ID.",
            "minimum": 0
          },
          "refresh_key": {
            "type": "string",
            "format": "uuid",
            "description": "The server's \"permanent\" refresh key."
          }
        }
      },
      "CreatedUnban": {
        "type": "object",
        "description": "A newly reverted ban.",
        "required": [
          "unban_id"
        ],
        "properties": {
          "unban_id": {
            "type": "integer",
            "format": "uint64",
            "description": "The unban's ID.",
            "minimum": 0
          }
        }
      },
      "Filter": {
        "type": "object",
        "description": "A course filter.",
        "required": [
          "id",
          "mode",
          "teleports",
          "tier",
          "ranked_status"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "description": "The filter's ID.",
            "minimum": 0
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "teleports": {
            "type": "boolean",
            "description": "The \"runtype\" this filter applies to (whether teleports are used or not)."
          },
          "tier": {
            "$ref": "#/components/schemas/Tier"
          },
          "ranked_status": {
            "$ref": "#/components/schemas/RankedStatus"
          },
          "notes": {
            "type": "string",
            "description": "Extra notes about this filter.",
            "nullable": true
          }
        }
      },
      "FilterUpdate": {
        "type": "object",
        "description": "Request body for updating course filters.",
        "properties": {
          "tier": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Tier"
              }
            ],
            "nullable": true
          },
          "ranked_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RankedStatus"
              }
            ],
            "nullable": true
          },
          "notes": {
            "type": "string",
            "description": "New notes.",
            "nullable": true
          }
        }
      },
      "FullMap": {
        "type": "object",
        "description": "A KZ map.\n\nThe only reason this is named `FullMap` instead of just `Map`, is because `utoipa` macros are\nstupid.",
        "required": [
          "id",
          "name",
          "global_status",
          "workshop_id",
          "checksum",
          "mappers",
          "courses",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint16",
            "description": "The map's ID.",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The map's name."
          },
          "description": {
            "type": "string",
            "description": "The map's description.",
            "nullable": true
          },
          "global_status": {
            "$ref": "#/components/schemas/GlobalStatus"
          },
          "workshop_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The map's workshop ID.",
            "minimum": 0
          },
          "checksum": {
            "type": "integer",
            "format": "uint32",
            "description": "The map's checksum.",
            "minimum": 0
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Player"
            },
            "description": "List of players who have contributed to the creation of this map."
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Course"
            },
            "description": "List of courses on this map."
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this map was approved."
          }
        }
      },
      "GameSession": {
        "type": "object",
        "description": "An in-game session.\n\nSee [module level documentation] for more details.\n\n[module level documentation]: crate::game_sessions::models",
        "required": [
          "id",
          "player",
          "server",
          "time_spent",
          "bhop_stats",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint64",
            "description": "The session's ID.",
            "minimum": 0
          },
          "player": {
            "$ref": "#/components/schemas/Player"
          },
          "server": {
            "$ref": "#/components/schemas/ServerInfo"
          },
          "time_spent": {
            "$ref": "#/components/schemas/TimeSpent"
          },
          "bhop_stats": {
            "$ref": "#/components/schemas/BhopStats"
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this session was submitted."
          }
        }
      },
      "GlobalStatus": {
        "anyOf": [
          {
            "type": "string",
            "title": "Name",
            "enum": [
              "not_global",
              "in_testing",
              "global"
            ],
            "example": "global"
          },
          {
            "type": "integer",
            "title": "Integer",
            "enum": [
              -1,
              0,
              1
            ],
            "example": 1
          }
        ],
        "default": "global",
        "example": "global"
      },
      "JumpType": {
        "anyOf": [
          {
            "type": "string",
            "title": "Name",
            "enum": [
              "longjump",
              "single_bhop",
              "multi_bhop",
              "weirdjump",
              "ladderjump",
              "ladderhop"
            ],
            "example": "longjump"
          },
          {
            "type": "integer",
            "title": "ID",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6
            ],
            "example": 1
          }
        ],
        "example": "longjump"
      },
      "Jumpstat": {
        "type": "object",
        "description": "A jumpstat.",
        "required": [
          "id",
          "type",
          "mode",
          "style",
          "player",
          "server",
          "strafes",
          "distance",
          "sync",
          "pre",
          "max",
          "overlap",
          "bad_angles",
          "dead_air",
          "height",
          "airpath",
          "deviation",
          "average_width",
          "airtime",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint64",
            "description": "The jumpstat's ID.",
            "minimum": 0
          },
          "type": {
            "$ref": "#/components/schemas/JumpType"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "style": {
            "$ref": "#/components/schemas/Style"
          },
          "player": {
            "$ref": "#/components/schemas/Player"
          },
          "server": {
            "$ref": "#/components/schemas/ServerInfo"
          },
          "strafes": {
            "type": "integer",
            "format": "uint8",
            "description": "The amount of strafes done in this jump.",
            "minimum": 0
          },
          "distance": {
            "type": "number",
            "format": "float",
            "description": "The jump's distance."
          },
          "sync": {
            "type": "number",
            "format": "float",
            "description": "The % of how much airtime was spent gaining speed."
          },
          "pre": {
            "type": "number",
            "format": "float",
            "description": "The jump's speed at jumpoff."
          },
          "max": {
            "type": "number",
            "format": "float",
            "description": "The maximum speed during the jump."
          },
          "overlap": {
            "type": "number",
            "format": "float",
            "description": "The % of how much airtime was spent pressing both directional keys at once."
          },
          "bad_angles": {
            "type": "number",
            "format": "float",
            "description": "The % of how much airtime keys were pressed but no speed was gained."
          },
          "dead_air": {
            "type": "number",
            "format": "float",
            "description": "The % of how much airtime was spent not gaining speed."
          },
          "height": {
            "type": "number",
            "format": "float",
            "description": "The maximum height during this jump (in units)."
          },
          "airpath": {
            "type": "number",
            "format": "float",
            "description": "How close to a perfect airpath this jump was.\n\nThe closer to 1.0 the better."
          },
          "deviation": {
            "type": "number",
            "format": "float",
            "description": "How far the landing point deviates from the jumpoff point."
          },
          "average_width": {
            "type": "number",
            "format": "float",
            "description": "The average strafe width."
          },
          "airtime": {
            "type": "string",
            "description": "How much time the player spent in the air."
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this jump was submitted."
          }
        }
      },
      "Limit": {
        "type": "number",
        "description": "limits the amount of returned values",
        "minimum": 0
      },
      "MapIdentifier": {
        "oneOf": [
          {
            "type": "integer",
            "format": "uint16",
            "description": "A map's ID.",
            "minimum": 0
          },
          {
            "type": "string",
            "description": "A map's name."
          }
        ],
        "description": "Maps are either identified by their ID, which is unique, or their name."
      },
      "MapInfo": {
        "type": "object",
        "description": "Information about a map.",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint16",
            "description": "The map's ID.",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The map's name."
          }
        }
      },
      "MapUpdate": {
        "type": "object",
        "description": "Request body for updating maps.",
        "properties": {
          "description": {
            "type": "string",
            "description": "A new description.",
            "nullable": true
          },
          "workshop_id": {
            "type": "integer",
            "format": "uint32",
            "description": "A new workshop ID.\n\nSetting this parameter implies setting `check_steam=true` and has precedence over it.",
            "nullable": true,
            "minimum": 0
          },
          "global_status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GlobalStatus"
              }
            ],
            "nullable": true
          },
          "check_steam": {
            "type": "boolean",
            "description": "Whether to check steam for an updated name and checksum."
          },
          "added_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "Players to be added as mappers of this map.",
            "nullable": true
          },
          "removed_mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "Players to be removed as mappers of this map.",
            "nullable": true
          },
          "course_updates": {
            "type": "object",
            "description": "Updates to courses on this map.\n\ncourse ID -> update payload",
            "additionalProperties": {
              "$ref": "#/components/schemas/CourseUpdate"
            },
            "example": {
              "1": {
                "name": "foobar"
              },
              "2": {
                "description": "cool course!"
              }
            },
            "nullable": true
          }
        }
      },
      "Mode": {
        "anyOf": [
          {
            "type": "string",
            "title": "Name",
            "enum": [
              "vanilla",
              "classic"
            ],
            "example": "classic"
          },
          {
            "type": "integer",
            "title": "ID",
            "enum": [
              1,
              2
            ],
            "example": 1
          }
        ],
        "example": "classic"
      },
      "NewBan": {
        "type": "object",
        "description": "Request body for submitting new bans.",
        "required": [
          "player_id",
          "reason"
        ],
        "properties": {
          "player_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "player_ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Addr"
              }
            ],
            "nullable": true
          },
          "reason": {
            "$ref": "#/components/schemas/BanReason"
          }
        }
      },
      "NewCourse": {
        "type": "object",
        "description": "Request body for submitting new map courses.",
        "required": [
          "mappers",
          "filters"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The course's name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The course's description.",
            "nullable": true
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of players who have contributed to the creation of this course."
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewFilter"
            },
            "description": "The course's filters."
          }
        }
      },
      "NewFilter": {
        "type": "object",
        "description": "Request body for submitting new course filters.",
        "required": [
          "mode",
          "teleports",
          "tier",
          "ranked_status"
        ],
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "teleports": {
            "type": "boolean",
            "description": "The \"runtype\" this filter applies to (whether teleports are used or not)."
          },
          "tier": {
            "$ref": "#/components/schemas/Tier"
          },
          "ranked_status": {
            "$ref": "#/components/schemas/RankedStatus"
          },
          "notes": {
            "type": "string",
            "description": "Extra notes about this filter.",
            "nullable": true
          }
        }
      },
      "NewJumpstat": {
        "type": "object",
        "description": "Request body for submitting new jumpstats.",
        "required": [
          "type",
          "mode",
          "style",
          "player_id",
          "strafes",
          "distance",
          "sync",
          "pre",
          "max",
          "overlap",
          "bad_angles",
          "dead_air",
          "height",
          "airpath",
          "deviation",
          "average_width",
          "airtime"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/JumpType"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "style": {
            "$ref": "#/components/schemas/Style"
          },
          "player_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "strafes": {
            "type": "integer",
            "format": "uint8",
            "description": "The amount of strafes done in this jump.",
            "minimum": 0
          },
          "distance": {
            "type": "number",
            "format": "float",
            "description": "The jump's distance."
          },
          "sync": {
            "type": "number",
            "format": "float",
            "description": "The % of how much airtime was spent gaining speed."
          },
          "pre": {
            "type": "number",
            "format": "float",
            "description": "The jump's speed at jumpoff."
          },
          "max": {
            "type": "number",
            "format": "float",
            "description": "The maximum speed during the jump."
          },
          "overlap": {
            "type": "number",
            "format": "float",
            "description": "The % of how much airtime was spent pressing both directional keys at once."
          },
          "bad_angles": {
            "type": "number",
            "format": "float",
            "description": "The % of how much airtime keys were pressed but no speed was gained."
          },
          "dead_air": {
            "type": "number",
            "format": "float",
            "description": "The % of how much airtime was spent not gaining speed."
          },
          "height": {
            "type": "number",
            "format": "float",
            "description": "The maximum height during this jump (in units)."
          },
          "airpath": {
            "type": "number",
            "format": "float",
            "description": "How close to a perfect airpath this jump was.\n\nThe closer to 1.0 the better."
          },
          "deviation": {
            "type": "number",
            "format": "float",
            "description": "How far the landing point deviates from the jumpoff point."
          },
          "average_width": {
            "type": "number",
            "format": "float",
            "description": "The average strafe width."
          },
          "airtime": {
            "type": "string",
            "description": "How much time the player spent in the air."
          }
        }
      },
      "NewMap": {
        "type": "object",
        "description": "Request body for submitting new maps.",
        "required": [
          "workshop_id",
          "global_status",
          "mappers",
          "courses"
        ],
        "properties": {
          "workshop_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The map's workshop ID.",
            "minimum": 0
          },
          "description": {
            "type": "string",
            "description": "The map's description.",
            "nullable": true
          },
          "global_status": {
            "$ref": "#/components/schemas/GlobalStatus"
          },
          "mappers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SteamID"
            },
            "description": "List of players who have contributed to the creation of this map."
          },
          "courses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewCourse"
            },
            "description": "List of courses on this map."
          }
        }
      },
      "NewPlayer": {
        "type": "object",
        "description": "Request body for registering new players.",
        "required": [
          "name",
          "steam_id",
          "ip_address"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The player's name."
          },
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "ip_address": {
            "type": "string",
            "description": "The player's IP address."
          }
        }
      },
      "NewPluginVersion": {
        "type": "object",
        "description": "Request body for submitting new plugin versions.",
        "required": [
          "semver",
          "git_revision"
        ],
        "properties": {
          "semver": {
            "type": "string",
            "description": "The semver representation."
          },
          "git_revision": {
            "type": "string",
            "description": "The corresponding git revision (commit hash)."
          }
        }
      },
      "NewRecord": {
        "type": "object",
        "description": "Request body for submitting new records.",
        "required": [
          "player_id",
          "mode",
          "style",
          "course_id",
          "teleports",
          "time",
          "bhop_stats"
        ],
        "properties": {
          "player_id": {
            "$ref": "#/components/schemas/SteamID"
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "style": {
            "$ref": "#/components/schemas/Style"
          },
          "course_id": {
            "type": "integer",
            "format": "uint32",
            "description": "The ID of the course this run was performed on.",
            "minimum": 0
          },
          "teleports": {
            "type": "integer",
            "format": "uint16",
            "description": "The amount of teleports used during this run.",
            "minimum": 0
          },
          "time": {
            "type": "string",
            "description": "The time it took to complete this run."
          },
          "bhop_stats": {
            "$ref": "#/components/schemas/BhopStats"
          }
        }
      },
      "NewServer": {
        "type": "object",
        "description": "Request body for approving new servers.",
        "required": [
          "name",
          "ip_address",
          "owned_by"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The server's name."
          },
          "ip_address": {
            "type": "string",
            "description": "The server's IP address and port."
          },
          "owned_by": {
            "$ref": "#/components/schemas/SteamID"
          }
        }
      },
      "NewUnban": {
        "type": "object",
        "description": "Request body for reverting a ban.",
        "required": [
          "reason"
        ],
        "properties": {
          "reason": {
            "type": "string",
            "description": "The reason this ban should be reverted."
          }
        }
      },
      "Object": {
        "type": "object",
        "title": "Object",
        "description": "arbitrary key-value pairs"
      },
      "Offset": {
        "type": "number",
        "description": "used for pagination",
        "default": 0,
        "maximum": 9223372036854775807,
        "minimum": -9223372036854775808
      },
      "Player": {
        "type": "object",
        "description": "A KZ player.",
        "required": [
          "name",
          "steam_id"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The player's name."
          },
          "steam_id": {
            "$ref": "#/components/schemas/SteamID"
          }
        }
      },
      "PlayerIdentifier": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SteamID"
          },
          {
            "type": "string",
            "description": "A player's name."
          }
        ],
        "description": "Players are usually identified by their [SteamID], which is unique, or their name."
      },
      "PlayerUpdate": {
        "type": "object",
        "description": "Request body for updating players.",
        "required": [
          "name",
          "ip_address",
          "session"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The player's name."
          },
          "ip_address": {
            "type": "string",
            "description": "The player's IP address."
          },
          "session": {
            "$ref": "#/components/schemas/Session"
          }
        }
      },
      "PluginVersion": {
        "type": "object",
        "description": "A CS2KZ plugin version.",
        "required": [
          "id",
          "semver",
          "git_revision",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint16",
            "description": "The version's ID.",
            "minimum": 0
          },
          "semver": {
            "type": "string",
            "description": "The semver representation."
          },
          "git_revision": {
            "type": "string",
            "description": "The corresponding git revision (commit hash)."
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this version was published."
          }
        }
      },
      "RankedStatus": {
        "anyOf": [
          {
            "type": "string",
            "title": "Name",
            "enum": [
              "never",
              "unranked",
              "ranked"
            ],
            "example": "ranked"
          },
          {
            "type": "integer",
            "title": "Integer",
            "enum": [
              -1,
              0,
              1
            ],
            "example": 1
          }
        ],
        "example": "ranked"
      },
      "Record": {
        "type": "object",
        "description": "A record (or \"run\").",
        "required": [
          "id",
          "mode",
          "style",
          "teleports",
          "time",
          "player",
          "map",
          "course",
          "server",
          "bhop_stats",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint64",
            "description": "The record's ID:",
            "minimum": 0
          },
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "style": {
            "$ref": "#/components/schemas/Style"
          },
          "teleports": {
            "type": "integer",
            "format": "uint16",
            "description": "The amount of teleports used during this run.",
            "minimum": 0
          },
          "time": {
            "type": "string",
            "description": "The time it took to complete this run."
          },
          "player": {
            "$ref": "#/components/schemas/Player"
          },
          "map": {
            "$ref": "#/components/schemas/MapInfo"
          },
          "course": {
            "$ref": "#/components/schemas/CourseInfo"
          },
          "server": {
            "$ref": "#/components/schemas/ServerInfo"
          },
          "bhop_stats": {
            "$ref": "#/components/schemas/BhopStats"
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this run was submitted."
          }
        }
      },
      "RefreshKey": {
        "type": "object",
        "description": "Response for generating a new permanent refresh key.",
        "required": [
          "refresh_key"
        ],
        "properties": {
          "refresh_key": {
            "type": "string",
            "format": "uuid",
            "description": "The refresh key."
          }
        }
      },
      "RefreshKeyRequest": {
        "type": "object",
        "description": "Request body for generating JWTs.",
        "required": [
          "refresh_key",
          "plugin_version"
        ],
        "properties": {
          "refresh_key": {
            "type": "string",
            "format": "uuid",
            "description": "The server's permanent refresh key."
          },
          "plugin_version": {
            "type": "string",
            "description": "The CS2KZ version the server is currently running."
          }
        }
      },
      "Server": {
        "type": "object",
        "description": "An approved CS2 server.",
        "required": [
          "id",
          "name",
          "ip_address",
          "owner",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint16",
            "description": "The server's ID.",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The server's name."
          },
          "ip_address": {
            "type": "string",
            "description": "The server's IP address and port."
          },
          "owner": {
            "$ref": "#/components/schemas/Player"
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When this server was approved."
          }
        }
      },
      "ServerIdentifier": {
        "oneOf": [
          {
            "type": "integer",
            "format": "uint16",
            "description": "A server's ID.",
            "minimum": 0
          },
          {
            "type": "string",
            "description": "A server's name."
          }
        ],
        "description": "Servers are either identified by their ID, which is unique, or their name."
      },
      "ServerInfo": {
        "type": "object",
        "description": "Information about a server.",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint16",
            "description": "The server's ID.",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "description": "The server's name."
          }
        }
      },
      "ServerUpdate": {
        "type": "object",
        "description": "Request body for updating servers.",
        "properties": {
          "name": {
            "type": "string",
            "description": "A new name.",
            "nullable": true
          },
          "ip_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocketAddrV4"
              }
            ],
            "nullable": true
          },
          "owned_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SteamID"
              }
            ],
            "nullable": true
          }
        }
      },
      "SteamID": {
        "anyOf": [
          {
            "type": "string",
            "title": "Steam ID",
            "example": "STEAM_1:1:161178172"
          },
          {
            "type": "string",
            "title": "Steam ID3",
            "example": "U:1:322356345"
          },
          {
            "type": "integer",
            "title": "Steam ID32",
            "example": 322356345
          },
          {
            "type": "integer",
            "title": "Steam ID64",
            "example": 76561198282622073
          }
        ],
        "description": "a player's SteamID",
        "example": "STEAM_1:1:161178172"
      },
      "Style": {
        "anyOf": [
          {
            "type": "string",
            "title": "Name",
            "enum": [
              "normal",
              "backwards",
              "sideways",
              "half_sideways",
              "w_only",
              "low_gravity",
              "high_gravity",
              "no_prestrafe",
              "negev",
              "ice"
            ],
            "example": "normal"
          },
          {
            "type": "integer",
            "title": "ID",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10
            ],
            "example": 1
          }
        ],
        "example": "normal"
      },
      "Tier": {
        "anyOf": [
          {
            "type": "string",
            "title": "Name",
            "enum": [
              "very_easy",
              "easy",
              "medium",
              "advanced",
              "hard",
              "very_hard",
              "extreme",
              "death",
              "unfeasible",
              "impossible"
            ],
            "example": "hard"
          },
          {
            "type": "integer",
            "title": "Numeric Value",
            "enum": [
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10
            ],
            "example": 1
          }
        ],
        "example": "hard"
      },
      "TimeSpent": {
        "type": "object",
        "description": "Breakdown of how time was spent.",
        "required": [
          "active",
          "spectating",
          "afk"
        ],
        "properties": {
          "active": {
            "type": "string",
            "description": "How much time did the player spend actively playing?"
          },
          "spectating": {
            "type": "string",
            "description": "How much time did the player spend in spectator mode?"
          },
          "afk": {
            "type": "string",
            "description": "How much time did the player spend doing nothing?"
          }
        }
      },
      "Unban": {
        "type": "object",
        "description": "A reverted ban.",
        "required": [
          "id",
          "reason",
          "created_on"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint64",
            "description": "The unban's ID.",
            "minimum": 0
          },
          "reason": {
            "type": "string",
            "description": "The reason for the unban."
          },
          "admin": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Player"
              }
            ],
            "nullable": true
          },
          "created_on": {
            "type": "string",
            "format": "date-time",
            "description": "When the ban was reverted."
          }
        }
      }
    },
    "securitySchemes": {
      "API Key": {
        "type": "http",
        "scheme": "bearer"
      },
      "Browser Session": {
        "type": "apiKey",
        "in": "cookie",
        "name": "kz-auth"
      },
      "CS2 Server": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}